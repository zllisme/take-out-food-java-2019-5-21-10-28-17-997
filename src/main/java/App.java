import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        List<Item> allItem = itemRepository.findAll();
        List<SalesPromotion> allSalesPromotion = salesPromotionRepository.findAll();
        Map<String,String> itemNames = new HashMap<>();
        Map<String,Double> itemPrices = new HashMap<>();
        for(Item eachItem : allItem) {
            itemNames.put(eachItem.getId(),eachItem.getName());
            itemPrices.put(eachItem.getId(),eachItem.getPrice());
        }
        double firstPromotionSpend = 0.0, secondPromotionSpend = 0.0;
        double firstPromotionSave = 0.0, secondPromotionSave = 0.0;
        String orderDetail = "";
        List<String> discountItem = new ArrayList<>();
        for(String eachInput : inputs) {
            String[] itemIdCount = eachInput.split(" x ");
            double eachPrice = itemPrices.get(itemIdCount[0]) * Double.parseDouble(itemIdCount[1]);
            orderDetail += itemNames.get(itemIdCount[0]) + " x " +
                    itemIdCount[1] + " = " + doubleTrans(eachPrice) + "元\n";
            firstPromotionSpend += eachPrice;
            List<String> promotionRelatedItems = allSalesPromotion.get(1).getRelatedItems();
            if(promotionRelatedItems.contains(itemIdCount[0])) {
                secondPromotionSpend += 0.5 * eachPrice;
                discountItem.add(itemNames.get(itemIdCount[0]));
            }else {
                secondPromotionSpend += eachPrice;
            }

        }
        secondPromotionSave = firstPromotionSpend - secondPromotionSpend;
        if(firstPromotionSpend >= 30) {
            firstPromotionSpend -= 6;
            firstPromotionSave = 6;
        }
        String result;
        if(firstPromotionSave == 0 && secondPromotionSave == 0) {
            result = "============= 订餐明细 =============\n" +
                    orderDetail +
                    "-----------------------------------\n" +
                    "总计：" + doubleTrans(firstPromotionSpend) + "元\n" +
                    "===================================";
        }
        else {
            if(firstPromotionSave >= secondPromotionSave) {
                result = "============= 订餐明细 =============\n" +
                        orderDetail +
                        "-----------------------------------\n" +
                        "使用优惠:\n" +
                        "满30减6元，省6元\n" +
                        "-----------------------------------\n" +
                        "总计：" + doubleTrans(firstPromotionSpend) + "元\n" +
                        "===================================";


            }else {
                result = "============= 订餐明细 =============\n" +
                        orderDetail +
                        "-----------------------------------\n" +
                        "使用优惠:\n" +
                        "指定菜品半价(" + String.join("，", discountItem) +
                        ")，省" + doubleTrans(secondPromotionSave) + "元\n" +
                        "-----------------------------------\n" +
                        "总计：" + doubleTrans(secondPromotionSpend) + "元\n" +
                        "===================================";

            }
        }
        return result;
    }

    public String doubleTrans(double num) {
        if(num % 1.0 == 0) {
            return String.valueOf((int)num);
        }
        return String.valueOf(num);
    }
}


